variable :
==========

- Storage locations that have name.
- Case sensitive (Upper Case is preferred).
- should never start a number, or any other special characters.
- it can start with lower or upper case letters or even underscore.

    e.g :

        MY_VAR = 'hello'
        echo "hi $MY_VAR"
        echo "hi ${MY_VAR}"
        echo "hi ${MY_VAR}ooooo"
test :

Used for evaluation. [ur condition to test]

This returns True if the condition is correct and return False if the condition is not correct. It returns false even
if there is no condition to test.


Common file operators :
    - d FILE: True if the file is a directory.
    - e FILE: True if the file exists.
    - f FILE: True if the file exist and it is regular.
    - r FILE: True if the the file is readable.
    - s FILE: True if the file exist and not empty.
    - w FILE: True if the file is writtable by you.
    - x FILE: True if the file is executable by you.
    - b FILE: True if the file is block special file.
    - c FILE: True if the file is character special file.

Common String operators :
    - z string : True if the string is empty
    - n string : True if the string is not empty
    string 1 = string2
    string 1 != string2

Common Arithmetic operators :
    eq - equals to
    ne - not equals to
    lt - less than
    le - less than or equal to
    gt - greater than
    ge - greater than or equal to
    


Block files and Character files :
=================================

When we read or write data from files, the request will go to kernel-driver first. If the file is a regular file, then
it will be handled by the file system driver and it is stored in zones of a disk or other storage media.When data is rea
-d or write from device files the request is handled by the driver related to that device. Every file has an associated
number that specify the related driver number.

Block devices - the related hardware reads or writes a whole block at a time. Data from block devices can be cached and
read back from cache and writes can be buffered.

Character special files - character devices - like pipes, serial ports etc... Writing or reading to devices like this is
an immediate action.. so when we write a byte character to this device, it might be immediately displayed on a screen
or converted to sound in a serial port etc.. Reading a byte from this device might cause serial port to wait for input
and then return a random output.. /dev/unrandom. Its called character file, because it handles each character individua-
-lly.

https://unix.stackexchange.com/questions/60034/what-are-character-special-and-block-special-files-in-a-unix-system

Understanding /dev and subdir :

https://unix.stackexchange.com/questions/18239/understanding-dev-and-its-subdirs-and-files/18534#18534


Functions :
============

DRY - Dont repeat yourself !

Shell scripts are not pre-compiled. They are compiled during the runtime and hence we need to define functions before
we use or call them at anypoint in the script.

We can accept parameters to function like positional parameters $1, $2 etc... but here $0 is still the name of the script
not the function name.

Function allows us to :

    - Write a block of code and use it multiple times
    - Potentially reduce the length of your shell script
    - maintain ur script by reducing the number of places u need to edit and troubleshoot.
    - Since the shell script complie during runtime, a function should be defined before it is used.
    - by default all variables are global in scope.
    - if we use the keyword 'local' preceed a variable so that the variable is only available inside the function
      in which it is defined.
    - like commands, functions also have exit statuses. Like 'exit', we can use the keyword 'return' in function for
      different exit statuses.


 WildCards :
 ==========

 * - matches zero or more characters
    *.txt
    a*
    a*.txt
 ? - matches exactly one character
    ?.txt
    a?
    a?.txt
[] - chatacter class, matches any of the character included between the bracket. Matches exactly one of the character
    ca[nt]
    ca[nt]*

[!] - matches any of the character NOT included between the brackets.
     [!aeiou]*
[a-g] - Ranges
[3-5]

Named Character classes  -- for most commonly used ranges.
[[:alpha:]]    - matches alphabets both lower and upper
[[:alphanum:]] - matches alphabets (lower and upper), numbers (integers and decimals)
[[:digit:]]    - matches numbers in decimal [0-9]
[[:lower:]]    - lower case alphabets
[[:upper:]]    - upper case alphabets
[[:space:]]    - white space, tabs, newe line characters etc

Matching wild characters use "\" infront of it

for e.g : Match all the files that ends with a question mark
            ideally it should be *? (but ? itself is a wild card, so we need to use an escape character )
            *\?